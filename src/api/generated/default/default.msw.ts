/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'

import type { User } from '../utoipaAxum.schemas'

export const getGetUserResponseMock = (overrideResponse: Partial<User> = {}): User => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getGetUserMockHandler = (
  overrideResponse?:
    | User
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)
) => {
  return http.get('*/user', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  })
}
export const getDefaultMock = () => [getGetUserMockHandler()]
