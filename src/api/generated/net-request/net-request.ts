/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../mutator/custom-instance'
import type {
  GetRequestsData,
  ResponseDataWrapperCaptureSwitch,
  ResponseDataWrapperRecordRequests,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas'

export const getCaptureStatus = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperCaptureSwitch>({
    url: `/net_request/capture/status`,
    method: 'GET',
    signal,
  })
}

export const getGetCaptureStatusQueryKey = () => {
  return [`/net_request/capture/status`] as const
}

export const getGetCaptureStatusInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCaptureStatus>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCaptureStatusQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCaptureStatus>>> = ({ signal }) =>
    getCaptureStatus(signal)

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCaptureStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCaptureStatusInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCaptureStatus>>
>
export type GetCaptureStatusInfiniteQueryError = void

export function useGetCaptureStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCaptureStatus>>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCaptureStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCaptureStatus>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCaptureStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCaptureStatus>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
    >
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCaptureStatusInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCaptureStatus>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>
    >
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCaptureStatusInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetCaptureStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCaptureStatusQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCaptureStatus>>> = ({ signal }) =>
    getCaptureStatus(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCaptureStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCaptureStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getCaptureStatus>>>
export type GetCaptureStatusQueryError = void

export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCaptureStatus>>,
          TError,
          Awaited<ReturnType<typeof getCaptureStatus>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCaptureStatus<
  TData = Awaited<ReturnType<typeof getCaptureStatus>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCaptureStatus>>, TError, TData>>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCaptureStatusQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const toggleCapture = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/net_request/capture/toggle`,
    method: 'POST',
    signal,
  })
}

export const getToggleCaptureMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof toggleCapture>>, TError, void, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof toggleCapture>>, TError, void, TContext> => {
  const mutationKey = ['toggleCapture']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof toggleCapture>>, void> = () => {
    return toggleCapture()
  }

  return { mutationFn, ...mutationOptions }
}

export type ToggleCaptureMutationResult = NonNullable<Awaited<ReturnType<typeof toggleCapture>>>

export type ToggleCaptureMutationError = void

export const useToggleCapture = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof toggleCapture>>, TError, void, TContext>
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof toggleCapture>>, TError, void, TContext> => {
  const mutationOptions = getToggleCaptureMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const getCachedRequests = (getRequestsData: GetRequestsData, signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperRecordRequests>({
    url: `/net_request/requests`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: getRequestsData,
    signal,
  })
}

export const getGetCachedRequestsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getCachedRequests>>,
    TError,
    { data: GetRequestsData },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getCachedRequests>>,
  TError,
  { data: GetRequestsData },
  TContext
> => {
  const mutationKey = ['getCachedRequests']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getCachedRequests>>,
    { data: GetRequestsData }
  > = (props) => {
    const { data } = props ?? {}

    return getCachedRequests(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetCachedRequestsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getCachedRequests>>
>
export type GetCachedRequestsMutationBody = GetRequestsData
export type GetCachedRequestsMutationError = void

export const useGetCachedRequests = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getCachedRequests>>,
      TError,
      { data: GetRequestsData },
      TContext
    >
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof getCachedRequests>>,
  TError,
  { data: GetRequestsData },
  TContext
> => {
  const mutationOptions = getGetCachedRequestsMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
