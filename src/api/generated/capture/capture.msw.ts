/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker'
import { delay, http, HttpResponse } from 'msw'

import { RecordingStatus, ResponseCode } from '../utoipaAxum.schemas'
import type {
  ResponseDataWrapperCaptureSwitch,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas'

export const getGetCaptureStatusResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperCaptureSwitch> = {}
): ResponseDataWrapperCaptureSwitch => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: { recordingStatus: faker.helpers.arrayElement(Object.values(RecordingStatus)) },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getToggleCaptureResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {}
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
})

export const getGetCaptureStatusMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperCaptureSwitch
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ResponseDataWrapperCaptureSwitch> | ResponseDataWrapperCaptureSwitch)
) => {
  return http.get('*/net_request/capture/status', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCaptureStatusResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, PATCH, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': '*',
        },
      }
    )
  })
}

export const getToggleCaptureMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<ResponseDataWrapperTupleUnit> | ResponseDataWrapperTupleUnit)
) => {
  return http.post('*/net_request/capture/toggle', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getToggleCaptureResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, PATCH, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': '*',
        },
      }
    )
  })
}
export const getCaptureMock = () => [
  getGetCaptureStatusMockHandler(),
  getToggleCaptureMockHandler(),
]
